// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/nlsh710599/still-practice/internal/database/model"
	mock "github.com/stretchr/testify/mock"
)

// MemeCoinRepository is an autogenerated mock type for the MemeCoinRepository type
type MemeCoinRepository struct {
	mock.Mock
}

// CreateMemeCoin provides a mock function with given fields: ctx, memeCoin
func (_m *MemeCoinRepository) CreateMemeCoin(ctx context.Context, memeCoin *model.MemeCoinEntity) error {
	ret := _m.Called(ctx, memeCoin)

	if len(ret) == 0 {
		panic("no return value specified for CreateMemeCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MemeCoinEntity) error); ok {
		r0 = rf(ctx, memeCoin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMemeCoin provides a mock function with given fields: ctx, id
func (_m *MemeCoinRepository) DeleteMemeCoin(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMemeCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMemeCoin provides a mock function with given fields: ctx, id
func (_m *MemeCoinRepository) GetMemeCoin(ctx context.Context, id uint) (*model.MemeCoinEntity, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMemeCoin")
	}

	var r0 *model.MemeCoinEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*model.MemeCoinEntity, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *model.MemeCoinEntity); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MemeCoinEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitTable provides a mock function with given fields:
func (_m *MemeCoinRepository) InitTable() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitTable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PokeMemeCoin provides a mock function with given fields: ctx, id
func (_m *MemeCoinRepository) PokeMemeCoin(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for PokeMemeCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMemeCoin provides a mock function with given fields: ctx, id, description
func (_m *MemeCoinRepository) UpdateMemeCoin(ctx context.Context, id uint, description string) error {
	ret := _m.Called(ctx, id, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemeCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, id, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMemeCoinRepository creates a new instance of MemeCoinRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemeCoinRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemeCoinRepository {
	mock := &MemeCoinRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
